import logging
import asyncio
from aiogram import Bot, Router, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

from db import Database
from config import TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

db = Database()


class AddWord(StatesGroup):
    word = State()
    translation = State()


class LastWord:
    def __init__(self):
        self.words = {}

    def set_word(self, user_id, word_id):
        self.words[user_id] = word_id

    def get_word(self, user_id):
        return self.words.get(user_id)


last_word = LastWord()


@router.message(Command('start'))
async def start(message: types.Message):
    await db.add_user(message.from_user.username)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—å —Å–ª–æ–≤–∞. –ò—Å–ø–æ–ª—å–∑—É–π /add, /word, /check.")


@router.message(Command('add'))
async def add_word_start(message: types.Message, state: FSMContext):
    await state.set_state(AddWord.word)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ:")


@router.message(AddWord.word)
async def add_word_step_1(message: types.Message, state: FSMContext):
    await state.update_data(word=message.text)
    await state.set_state(AddWord.translation)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:")


@router.message(AddWord.translation)
async def add_word_step_2(message: types.Message, state: FSMContext):
    data = await state.get_data()
    word, translation = data['word'], message.text
    success = await db.add_word(message.from_user.username, word, translation)

    if success:
        await message.answer("–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.")

    await state.clear()


@router.message(Command('word'))
async def get_word(message: types.Message):
    word_data = await db.get_random_word(message.from_user.username)

    if word_data:
        word_id, word = word_data['id'], word_data['word']
        last_word.set_word(message.from_user.id, word_id)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{word_id}")]
        ])

        await message.answer(word, reply_markup=keyboard)
    else:
        await message.answer("–í –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–ª–æ–≤.")


@router.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_word(callback: types.CallbackQuery):
    word_id = int(callback.data.split("_")[1])

    await db.delete_word(word_id)
    await callback.message.edit_text("–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ")


@router.message(Command("check"))
async def check_word(message: types.Message):
    word_id = last_word.get_word(message.from_user.id)

    if word_id:
        translation = await db.get_translation(word_id)
        if translation:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ", callback_data=f"correct_{word_id}"),
                    InlineKeyboardButton(text="‚ùå", callback_data=f"wrong_{word_id}")
                ]
            ])

            await message.answer(translation, reply_markup=keyboard)
        else:
            await message.answer("–û—à–∏–±–∫–∞: —Å–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π /word.")


@router.callback_query(lambda c: c.data.startswith("correct_") or c.data.startswith("wrong_"))
async def check_answer(callback: types.CallbackQuery):
    correct = callback.data.startswith("correct_")
    word_id = int(callback.data.split("_")[1])

    await db.update_priority(word_id, correct)
    await callback.message.edit_text("–ü—Ä–∏–Ω—è—Ç–æüëç")
    await callback.answer()


async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"),
        BotCommand(command="word", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–æ"),
        BotCommand(command="check", description="–ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥"),
    ]
    await bot.set_my_commands(commands)


async def main():
    await db.connect()
    await db.create_tables()

    await set_bot_commands(bot)
    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
